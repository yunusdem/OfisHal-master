@{
    var TeslimatYeriModel = (List<TohalTeslimatYeri>)ViewData["TeslimatYeri"];
}
<script>
    var dataView;
    var grid;
    var data = [];
    var columns = [
        { id: "id", name: "ID", width: 10, field: "id", cssClass: "cell-title", selectable: false, editable: false },
        { id: "tip", name: "Tip", field: "tip" },
        { id: "ad", name: "Ad", field: "ad", editor: Slick.Editors.Text },
        { id: "hkssirano", name: "HKS Sıra No", field: "hkssirano", editor: Slick.Editors.Text },
        { id: "adres", name: "Adres", field: "adres", editor: Slick.Editors.Text },
        { id: "teslimatyerid", name: "Teslimat Yeri Id", field: "teslimatyerid", editor: Slick.Editors.Text },
        { id: "hksid", name: "HKS Id", field: "hksid", editor: Slick.Editors.Text },
    ];

    var options = {
        columnPicker: {
            columnTitle: "Columns",
            hideForceFitButton: false,
            hideSyncResizeButton: false,
            forceFitTitle: "Force fit columns",
            syncResizeTitle: "Synchronous resize",
        },
        editable: true,
        enableAddRow: true,
        enableCellNavigation: true,
        asyncEditorLoading: false,
        rowHeight: 40,
        forceFitColumns: true,
    };


    function toggleFilterRow() {
        grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
    }

    document.addEventListener("DOMContentLoaded", function () {


    @if (TeslimatYeriModel.Count == 0)
    {
        @:var d = (data[0] = {});
        @:d["id"] = 1;
        @:d["tip"] = "Şube";
        @:d["ad"] = "";
        @:d["hkssirano"] = "";
        @:d["adres"] = "";
        @:d["teslimatyerid"] = "";
        @:d["hksid"] = "";
    }
    else
    {
        for (var i = 0; i < TeslimatYeriModel.Count; i++)
        {
            @:var d = (data[@i] = {});
            @:d["id"] = @i+1;
            var enumValue = TeslimatYeriModel[i].Tip;
            var enumText = EnumHelperFunc.GetDisplayName((IsletmeTuru)enumValue);
            @:d["tip"] = "@Html.Raw(enumText)";
            @:d["ad"] = "@Html.Raw(TeslimatYeriModel[i].Ad)";
            @:d["hkssirano"] = "@Html.Raw(TeslimatYeriModel[i].HksWebSiraNo)";
            @:d["adres"] = "@Html.Raw(TeslimatYeriModel[i].Adres)";
            @:d["teslimatyerid"] = "@Html.Raw(TeslimatYeriModel[i].TeslimatYeriId)";
            @:d["hksid"] = "@Html.Raw(TeslimatYeriModel[i].HksId)";
        }
    }
            dataView = new Slick.Data.DataView({ inlineFilters: true });
        grid = new Slick.Grid("#myGrid", dataView, columns, options);
        grid.setSelectionModel(new Slick.RowSelectionModel());

        var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, {
            ...options,
        });


        grid.onCellChange.subscribe(async function (e, args) {

            var rowId = args.row;

            if (args.cell === columns.findIndex(c => c.id === "id")) {
                if (Number.isInteger(args.item.id)) {
                    dataView.updateItem(args.item.id, args.item);
                } else {
                    // Çevrim yap ve kontrol et.
                    var itemIdAsInteger = parseInt(args.item.id, 10);
                    dataView.updateItem(itemIdAsInteger, args.item);
                }


            }

        });
        function gridGetData(reqUrl, val, target) {
            var deger = val.trim();
            return new Promise((resolve, reject) => {
                if (deger.length > 0) {
                    $.ajax({
                        url: reqUrl,
                        type: "GET",
                        data: { content: deger },
                        success: (res) => {
                            switch (res.length) {
                                case 0:
                                    alert("Böyle Bir Kayıt Bulunamadı");
                                    resolve({ result: false, data: null });
                                    break;
                                case 1:
                                    resolve({ result: true, data: res[0] });
                                    break;
                                default:
                                    resolve({ result: false, data: null });
                                    loadModal(res, target);
                                    break;
                            }
                        }
                    });
                }
                else {
                    resolve({ result: false, data: null });
                }
            });
        }
        grid.onKeyDown.subscribe(function (e) {
            var activeCell = grid.getActiveCell();
            var column = grid.getColumns()[activeCell.cell];

            // Şimdi dataView'deki işlemlerinizi gerçekleştirin.
            if (grid.getActiveCell().row === dataView.getLength()) {
                onAddNewRow();
            }

            // select all rows on ctrl-a
            if (e.which != 65 || !e.ctrlKey) {
                return false;
            }
            var rows = [];
            for (var i = 0; i < dataView.getLength(); i++) {
                rows.push(i);
            }

            grid.setSelectedRows(rows);
            e.preventDefault();
        });

        dataView.onRowCountChanged.subscribe(function (e, args) {
            grid.updateRowCount();
            grid.render();
        });

        dataView.onRowsChanged.subscribe(function (e, args) {
            grid.invalidateRows(args.rows);
            grid.render();
        });

        grid.onClick.subscribe(function (e) {
            var cell = grid.getCellFromEvent(e);
            var clickedColumn = grid.getColumns()[cell.cell];

            if (clickedColumn.id == "tip") {
                if (!grid.getEditorLock().commitCurrentEdit()) {
                    return;
                }

                var states = {
                    "Şube": "Tasnifleme ve Ambalajlama",
                    "Tasnifleme ve Ambalajlama": "Hal İçi Deposu",
                    "Hal İçi Deposu": "Hal Dışı Deposu",
                    "Hal Dışı Deposu": "Hal İçi İşyeri",
                    "Hal İçi İşyeri": "Hal Dışı İşyeri",
                    "Hal Dışı İşyeri": "Sınai İşletme",
                    "Sınai İşletme": "Dağıtım Merkezi",
                    "Dağıtım Merkezi": "Yurt Dışı",
                    "Yurt Dışı": "Bireysel Tüketim",
                    "Bireysel Tüketim": "Perakende Satış Yeri",
                    "Perakende Satış Yeri": "Şube" // Döngüyü tamamlamak için başa dön
                };
                data[cell.row].tip = states[data[cell.row].tip];
                grid.updateRow(cell.row);
                e.stopPropagation();
            }

            if (cell.row === dataView.getLength() && grid.getCellFromEvent(e).cell === 0) {
                onAddNewRow();
            }
        });

        grid.onAddNewRow.subscribe(function (e, args) {

            var newDataRow = {
                id: dataView.getLength() + 1, // Yeni bir numara oluştur
                tip: "Şube",
                ad: "",
                hkssirano: "",
                adres: "",
                hksid: "",
                teslimatyeriid: "",
            };
            if (!isLastRowEmpty()) {
                Slick.Utils.extend(newDataRow, args.item);
                dataView.addItem(newDataRow);
                dataView.refresh();
            }
        });



        function onAddNewRow() {

            var newDataRow = {
                id: dataView.getLength() + 1, // Yeni bir numara oluştur
                tip: "Şube",
                ad: "",
                hkssirano: "",
                adres: "",
                hksid: "",
                teslimatyeriid: "",
            };
            if (!isLastRowEmpty()) {
                dataView.addItem(newDataRow);
                dataView.refresh();
            }
        }
        function isLastRowEmpty() {
            var lastRow = data[data.length - 1];
            return !lastRow.tip.trim() && !lastRow.ad.trim();
        }

        document.querySelector("#contextMenu").addEventListener('click', (e) => {
            if (e.target.nodeName.toLowerCase() !== "li") {
                return;
            }
            if (!grid.getEditorLock().commitCurrentEdit()) {
                return;
            }
            const row = e.target.parentNode.dataset.row;
            data[row].tip = e.target.getAttribute('data');
            grid.updateRow(row);
        });


        var dataArray = data;

        dataView.beginUpdate();
        dataView.setItems(dataArray);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);
    });


    var enumValuesJson = @Html.Raw(EnumHelperFunc.GetEnumDisplayNamesAndValuesAsJson());


    function postGrid() {
        var gridData = grid.getData();

        var requestDataList = [];

        for (var i = 0; i < gridData.items.length; i++) {
            var rowData = gridData.items[i];
            var enumValue = enumValuesJson[rowData.tip];
            if (parseInt(rowData.markaId) !== 0 && rowData.markaId !== "" && rowData.markaId !== null) {

                var requestData = {
                    tip: parseInt(enumValue),
                    ad: rowData.ad,
                    adres: rowData.adres,
                    hkswebsirano: rowData.hkssirano,
                    hksid : rowData.hksid,
                    teslimatyeriid: rowData.teslimatyerid
                };

                for (const key in requestData) {
                    if (requestData.hasOwnProperty(key) && typeof requestData[key] === 'number' && isNaN(requestData[key])) {
                        requestData[key] = 0;
                    }
                }

                requestDataList.push(requestData);
            }
        }

        var requestPostData = JSON.stringify(requestDataList);

        $.ajax({
            url: '/TeknikIslemler/PostTeslimatYeri',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: requestPostData,
            success: function (responsedata) {
                //faturaSave();
                ShowAlert(true,'İşlem başarılı');
                location.reload();
            },
            error: function (error) {
                console.error('Hata oluştu:', error);
            }
        });
    }
    //function faturaSave() {
    //    // Form verilerini serialize ediyoruz
    //    var formData = $("#faturaForm").serialize();

    //    $.ajax({
    //        type: "POST",
    //        url: "/TohalFaturas/SaveFatura",
    //        data: formData,
    //        success: function (response) {

    //            console.log(response);
    //        },
    //        error: function (error) {

    //            console.error(error);
    //        }
    //    });
    //}





</script>
<!--Mal-->
<script>


    function updateMalAdCell(malId, ad) {
        debugger;
        // Tıklanan satırın indisini al
        var rowId = grid.getActiveCell().row;

        // SlickGrid'deki veriyi güncelle
        data[rowId].adres = malId;
        data[rowId].tip = ad;

        // SlickGrid'deki satırı güncelle
        grid.updateRow(rowId);
        // $("#selectModal").modal('toggle');
        goToNextCol();
    }

    function updateMalCinsCell(malCinsId, malCins) {
        debugger;
        // Tıklanan satırın indisini al
        var rowId = grid.getActiveCell().row;

        // SlickGrid'deki veriyi güncelle
        data[rowId].adid = malCinsId;
        data[rowId].ad = malCins;

        // SlickGrid'deki satırı güncelle
        grid.updateRow(rowId);
        // $("#selectModal").modal('toggle');
        goToNextCol();
    }


    function goToNextCol() {

        var activeCell = grid.getActiveCell();
        var column = grid.getColumns()[activeCell.cell];

        var nextCell = null;
        if (activeCell) {
            nextCell = {
                row: activeCell.row,
                cell: activeCell.cell + 1
            };
        }

        if (nextCell && nextCell.cell < grid.getColumns().length) {
            grid.gotoCell(nextCell.row, nextCell.cell, true);
        }
    }

    function createGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }


</script>