@{
    //var FaturaModel = new List<OfisHal.Web.Models.VohalMakbuzSatiri>()
    //{
    //    new OfisHal.Web.Models.VohalMakbuzSatiri {MalKodu = "1", MalAdi = "domates",Miktar = 200, KapSayisi = 10, Fiyat = 35, Tutar = 7000, KdvOrani = 18, MalBirimi = "KG", SatisTarihi = DateTime.Now},
    //    new OfisHal.Web.Models.VohalMakbuzSatiri {MalKodu = "2", MalAdi = "biber",Miktar = 150, KapSayisi = 20, Fiyat = 50, Tutar = 1000, KdvOrani = 30, MalBirimi = "BAG", SatisTarihi = DateTime.Now},
    //};
    var FaturaModel = (List<OfisHal.Web.Models.VohalMakbuzSatiri>)ViewData["makbuzSatirlar"];
    //var FaturaModel = (List<OfisHal.Web.Models.VohalMakbuzSatiri>)ViewData["makbuzSatirlar"];
}
<script>
    var dataView;
    var grid;
    var data = [];
    var columns = [
        { id: "id", name: "ID", width: 10, field: "id", cssClass: "cell-title", selectable: false, editable: false },
        { id: "satistarih", name: "Satış Tarihi", field: "satistarih", cssClass: "cell-title", editable: false },
        { id: "mal", name: "Mal", field: "mal", editor: Slick.Editors.Text, formatter: malFormatter },
        { id: "adet", name: "Adet", field: "adet", cssClass: "column-sayi", editor: Slick.Editors.Text },
        { id: "kilo", name: "Kilo", field: "kilo", cssClass: "column-sayi", editor: Slick.Editors.Text },
        { id: "ortkilo", name: "Ort. Kilo", field: "ortkilo", cssClass: "column-sayi", editable: false, },
        { id: "malkapfiyat", name: "Mal Kap Fiyatı", field: "malkapfiyat", cssClass: "column-sayi", editable: false, },
        { id: "malfiyat", name: "Mal Fiyatı", field: "malfiyat", cssClass: "column-sayi", editor: Slick.Editors.Text },
        { id: "tutar", name: "Tutar", field: "tutar", cssClass: "column-sayi", editable: false, },
        { id: "kdv", name: "Kdv", field: "kdv", cssClass: "column-sayi", editor: Slick.Editors.Text },
    ];

    var options = {
        columnPicker: {
    columnTitle: "Sütunlar",
            hideForceFitButton: false,
            hideSyncResizeButton: false,
            forceFitTitle: "Genişliğe sığdırmaya zorla",
            syncResizeTitle: "Senkron yeniden boyutlandırma",
        },
        editable: true,
        enableAddRow: true,
        enableCellNavigation: true,
        asyncEditorLoading: false,
        rowHeight: 40,
        forceFitColumns: true,
        createFooterRow: true,
        showFooterRow: true,
        footerRowHeight: 28
    };

    function UpdateAllTotals(grid) {
        var columnIdx = grid.getColumns().length;
        while (columnIdx--) {
            UpdateTotal(columnIdx, grid);
        }
    }


    function UpdateTotal(cell, grid) {
        var columnId = grid.getColumns()[cell].id;

        // Sadece istenen sütunlara odaklan
        if (["id", "adet", "kilo", "fiyat", "tutar", "kdv"].includes(columnId)) {
            var total = 0;
            var i = data.length;
            while (i--) {
                if (columnId == "tutar" || columnId == "fiyat") {
                    total += parseFloat(data[i][columnId]);
                }
                else {
                    total += parseInt(data[i][columnId], 10) || 0;
                }
            }
            var columnElement = grid.getFooterRowColumn(columnId);
            total = isNaN(total) ? 0 : total;
            columnElement.textContent = `${total}`;
        }
        else {
            var columnElement = grid.getFooterRowColumn(columnId);
            columnElement.textContent = "-";
        }
    }

    function toggleFilterRow() {
        grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
    }

    document.addEventListener("DOMContentLoaded", function () {

        const savedColumnStates = loadColumnSettings();
        dataView = new Slick.Data.DataView({ inlineFilters: true });

        @if (FaturaModel?.Count == 0)
        {
            @:var d = (data[0] = {});
            @:d["id"] = 1;
            @:d["satistarih"] = GetCurrentDate();
            @:d["mal"] = "";
            @:d["malid"] = "";
            @:d["marbirim"] = "";
            @:d["adet"] = "";
            @:d["kilo"] = "";
            @:d["ortkilo"] = "";
            @:d["malkapfiyat"] = "";
            @:d["malfiyat"] = "";
            @:d["tutar"] = "";
            @:d["kdv"] = "";

        }
        else
        {
            //ADET -> KAP SAYISI KİLO -> MİKTAR
            for (var i = 0; i < FaturaModel?.Count; i++)
            {

             @:var d = (data[@i] = {});
             @:d["id"] = @i+1;
             @:d["satistarih"] = "@Html.Raw(FaturaModel[i].SatisTarihi?.ToString("d.MM.yyyy"))";
             @:d["mal"] = "@Html.Raw(FaturaModel[i].MalAdi)";
             @:d["malid"] = "@Html.Raw(FaturaModel[i].MalId)";
             @:d["marbirim"] = "@Html.Raw(FaturaModel[i].MalBirimi)";
             @:d["adet"] = "@Html.Raw(FaturaModel[i].KapSayisi)";
             @:d["kilo"] = "@Html.Raw(FaturaModel[i].Miktar)";
             @:d["ortkilo"] = "@Html.Raw(Convert.ToDecimal(FaturaModel[i].Miktar) / Convert.ToDecimal(FaturaModel[i].KapSayisi))";
             @:d["malkapfiyat"] = "";
             @:d["malfiyat"] = FormatDecimalNumber(@Html.Raw(FaturaModel[i].Fiyat));
             @:d["tutar"] = "@Html.Raw(FaturaModel[i].Tutar)";
             @:d["kdv"] = "@Html.Raw(FaturaModel[i].KdvOrani)";
        }
    }
        grid = new Slick.Grid("#myGrid", dataView, columns, options);
        UpdateAllTotals(grid);
        grid.setSelectionModel(new Slick.RowSelectionModel());

        var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, {
            ...options,
        });

        // Sütun seçim ayarları değiştikçe localStorage'a kaydet
        columnpicker.onColumnsChanged.subscribe(function (e, args) {
            var storedColumns = grid.getColumns();
            saveColumnSettings(storedColumns);
        });
        grid.onColumnsResized.subscribe(function (e, args) {
            var storedColumns = grid.getColumns();
            saveColumnSettings(storedColumns);
        });
        if (savedColumnStates) {
            grid.setColumns(savedColumnStates);
        }
        grid.onContextMenu.subscribe(function (e) {
            e.preventDefault();
            var cell = grid.getCellFromEvent(e);
            const contextMenuElm = document.querySelector('#contextMenu');
            contextMenuElm.dataset.row = cell.row;
            contextMenuElm.style.top = `${e.pageY}px`;
            contextMenuElm.style.left = `${e.pageX}px`;
            contextMenuElm.style.display = 'block';

            document.body.addEventListener('click', () => {
                contextMenuElm.style.display = 'none';
            });
        });

        grid.onCellChange.subscribe(async function (e, args) {

            var rowId = args.row;
            if (args.cell === columns.findIndex(c => c.id === "miktar") ||
                args.cell === columns.findIndex(c => c.id === "fiyat")
            ) {
                data[rowId].miktar = data[rowId].miktar || 0;
                data[rowId].fiyat = data[rowId].fiyat || 0;
                updateRowValues(rowId);
            }
            if (args.cell === columns.findIndex(c => c.id === "id")) {
                if (Number.isInteger(args.item.id)) {
                    dataView.updateItem(args.item.id, args.item);
                } else {
                    // Çevrim yap ve kontrol et.
                    var itemIdAsInteger = parseInt(args.item.id, 10);
                    dataView.updateItem(itemIdAsInteger, args.item);
                }


            }

            UpdateTotal(args.cell, args.grid);
            switch (args.column.field) {
                case "mal":
                    var val = await gridGetData("/Common/MalGetir?isInput=True&target=gridMal&codeOrName=false&inputType=name", args.item[args.column.field], "mal");
                    val.result ? updateMalCell(val.data.MalId, val.data.Ad) : null;
                    break;
                case "adet":
                case "malfiyat":
                case "kilo":
                    OrtKiloHesapla();
                    TutarHesapla();
                    break;
                case "kdv":
                    DigerHesaplamalar();
                    break;


            }
        });
        function gridGetData(reqUrl, val, target) {
            var deger = val.trim();
            return new Promise((resolve, reject) => {
                if (deger.length > 0) {
                    $.ajax({
                        url: reqUrl,
                        type: "GET",
                        data: { content: deger },
                        success: (res) => {
                            switch (res.length) {
                                case 0:
                                    ShowAlert(false, "Kayıt Bulunamadı");
                                    goToPrevColumn(true);
                                    resolve({ result: false, data: null });
                                    break;
                                case 1:
                                    resolve({ result: true, data: res[0] });
                                    break;
                                default:
                                    resolve({ result: false, data: null });
                                    goToPrevColumn(true);
                                    loadModal(res, target);
                                    break;
                            }
                        }
                    });
                }
                else {
                    resolve({ result: false, data: null });
                }
            });
        }
        grid.onKeyDown.subscribe(function (e) {
            var activeCell = grid.getActiveCell();
            if (activeCell != null) {
                var column = grid.getColumns()[activeCell.cell];
                if (column.cssClass == "column-sayi") {
                    //harf girişini engelle
                    if (e.key.length === 1 && e.key.match(/[^0-9]/)) {
                        e.preventDefault();
                    }


                }
            }

            if (e.key === 'F12') {
                var formatterColumns = ["mal"];
                var field = column.field;
                // İlgili buttonun id'sini belirle
                if (formatterColumns.includes(field)) {
                    var buttonId = field + "Button";
                    var button = document.getElementById(buttonId);
                    if (button) {
                        button.click();
                    }

                    e.preventDefault();
                }
            }

            if (e.ctrlKey && (e.key === 's' || e.key === 'S')) {
                e.preventDefault();

                DeleteConfirm().then(p => {
                    if (p.isConfirmed) {
                        // DataView'dan satırı kaldır
                        dataView.deleteItem(activeCell.row + 1);

                        // İlgili satırı grid üzerinden kaldır
                        grid.invalidateRow(activeCell.row + 1);
                        grid.render();

                        // Eğer gerekiyorsa, veriyi güncelle
                        dataView.refresh();
                    }
                });
            }

            if (e.ctrlKey && (e.key === 'e' || e.key === 'E')) {
                e.preventDefault();

                onAddNewRow()
            }

            if (e.which === 13) {
                // Şimdi dataView'deki işlemlerinizi gerçekleştirin.
                if (grid.getActiveCell().row === dataView.getLength()) {
                    onAddNewRow();
                }
            }


            // select all rows on ctrl-a
            if (e.which != 65 || !e.ctrlKey) {
                return false;
            }
            var rows = [];
            for (var i = 0; i < dataView.getLength(); i++) {
                rows.push(i);
            }

            grid.setSelectedRows(rows);
            e.preventDefault();
        });

        dataView.onRowCountChanged.subscribe(function (e, args) {
            grid.updateRowCount();
            grid.render();
        });

        dataView.onRowsChanged.subscribe(function (e, args) {
            grid.invalidateRows(args.rows);
            grid.render();
        });

        grid.onClick.subscribe(function (e) {
            var cell = grid.getCellFromEvent(e);
            var clickedColumn = grid.getColumns()[cell.cell];

            if (cell.row === dataView.getLength() && grid.getCellFromEvent(e).cell === 0) {
                onAddNewRow();
            }
        });

        grid.onAddNewRow.subscribe(function (e, args) {

            var newDataRow = {
                id: dataView.getLength() + 1, // Yeni bir numara oluştur
                satistarih: GetCurrentDate(),
                mal: "",
                malid: "",
                marbirim: "",
                adet: "",
                kilo: "",
                ortkilo: "",
                malkapfiyat: "",
                malfiyat: "",
                tutar: "",
                kdv: "",

            };

            if (!isLastRowEmpty()) {
                Slick.Utils.extend(newDataRow, args.item);
                dataView.addItem(newDataRow);
                dataView.refresh();
            }
        });



        function onAddNewRow() {

            var newDataRow = {
                id: dataView.getLength() + 1, // Yeni bir numara oluştur
                satistarih: GetCurrentDate(),
                mal: "",
                malid: "",
                marbirim: "",
                adet: "",
                kilo: "",
                ortkilo: "",
                malkapfiyat: "",
                malfiyat: "",
                tutar: "",
                kdv: "",
            };
            if (!isLastRowEmpty()) {
                dataView.addItem(newDataRow);
                dataView.refresh();
            }
        }
        function isLastRowEmpty() {
            var lastRow = data[data.length - 1];
            return !lastRow.mal.trim();
        }


        var dataArray = data;

        dataView.beginUpdate();
        dataView.setItems(dataArray);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);

    });

    // MAL
    function malFormatter(row, cell, value, columnDef, dataContext) {
        return "<div><button type='button' data-btarget='mal' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' data-bs-toggle='modal' data-bs-target='#modal' data-label='Seç' data-remote-url='@Url.Action("MalAdlar", "Common", new { target = "gridMal",isInput = true ,inputType = "name" })'' ><i class='ri-search-line'></i></button>" + value + "</div>";
    }




    function updateRowValues(rowId) {

        if (!isNaN(miktar) && !isNaN(fiyat)) {
            data[rowId].tutar = (parseFloat(data[rowId].miktar) * parseFloat(data[rowId].fiyat)).toFixed(2);

            // Grid'i güncelle
            grid.updateRow(rowId);

        }
    }

    // localStorage üzerinde sütun seçim ayarlarını kaydet
    function saveColumnSettings(columnStates) {
        var columnsToSave = columnStates.map(column => {
            var formattedColumn = {
                ...column,
                formatter: column.formatter ? column.formatter.toString() : null
            };

            //// Eğer editor bir fonksiyon ise, onu ad olarak kaydet
            //if (typeof column.editor === 'function') {
            //    formattedColumn.editor = 'function';
            //} else if (typeof column.editor === 'object') {
            //    // Eğer editor bir nesne ise, tüm özelliklerini kaydet
            //    formattedColumn.editor = { ...column.editor };
            //} else {
            //    formattedColumn.editor = null;
            //}

            if (column.editor != undefined && column.editor != null) {
                formattedColumn.editor = column.editor.name;
            }

            return formattedColumn;
        });

        localStorage.setItem('columnSettingsMakbuz', JSON.stringify(columnsToSave));
    }

    // localStorage'dan sütun seçim ayarlarını al
    function loadColumnSettings() {
        const savedColumnStates = localStorage.getItem('columnSettingsMakbuz');
        if (savedColumnStates) {
            const columns = JSON.parse(savedColumnStates);
            return columns.map(column => {
                var restoredColumn = {
                    ...column,
                    formatter: column.formatter ? new Function('return ' + column.formatter)() : null
                };

                //// Eğer editor 'function' olarak kaydedilmişse, geri yüklenirken bir fonksiyon olarak atandı
                //if (column.editor === 'function') {
                //    restoredColumn.editor = Slick.Editors.Text;
                //} else {
                //    restoredColumn.editor = null;
                //}

                if (column.editor === "TextEditor") {
                    restoredColumn.editor = Slick.Editors.Text;
                }
                else if (column.editor === "IntegerEditor") {
                    restoredColumn.editor = Slick.Editors.Integer;
                }
                else if (column.editor === "_FloatEditor") {
                    restoredColumn.editor = Slick.Editors.Float;
                }
                else {
                    restoredColumn.editor = null;
                }

                return restoredColumn;
            });
        }
        return null;
    }

    function postGrid(kesildimi) {
        var gridData = grid.getData();

        grid.getEditController().commitCurrentEdit();
        grid.resetActiveCell();
        var requestDataList = [];

        for (var i = 0; i < gridData.items.length; i++) {
            var rowData = gridData.items[i];
            if (parseInt(rowData.malId) !== 0 && rowData.malId !== "" && rowData.malId !== null) {

                var requestData = {
                    SatirNo: rowData.id - 1,
                    MalId: parseInt(rowData.malid),
                    KapSayisi: parseInt(rowData.adet),
                    Miktar: parseInt(rowData.kilo),
                    Fiyat: parseInt(rowData.malfiyat),
                    Tutar: parseInt(rowData.tutar),
                    KdvOrani: parseInt(rowData.kdv),
                    SatisTarihi: rowData.satistarih,
                    Guid: "@Html.Raw(Guid.Empty)",
                };

                for (const key in requestData) {
                    if (requestData.hasOwnProperty(key) && typeof requestData[key] === 'number' && isNaN(requestData[key])) {
                        requestData[key] = 0;
                    }
                }
                requestDataList.push(requestData);
            }
        }

        var requestPostData = JSON.stringify(requestDataList);
        $.ajax({
            url: '/DokumIslemleri/CreateMakbuzSatir',
            type: 'POST',
            //contentType: 'application/json; charset=utf-8',
            data: { tohalIslkeleMakbuzSatirlari: requestDataList, makbuzid: $("#MakbuzId").val() },
            success: function (responsedata) {
                //if (responsedata.success)
                //    ShowAlert(responsedata.success, responsedata.message);
                //else
                //    ErrorAlert(responsedata.message);

                $("#hidGuid").val(responsedata.guid)
                postGridElements(kesildimi);
            },
            error: function (error) {
                ErrorAlert("Hata Oluştu -Makbuz Satırları kontrol edin" + error);
            }
        });
    }
</script>
<!--Mal-->
<script>

    function updateMalCell(malId, malAdi) {
        if (malId != null && malId != "" && malAdi != null && malAdi != "") {
            // Tıklanan satırın indisini al
            var rowId = grid.getActiveCell().row;
            // SlickGrid'deki veriyi güncelle
            data[rowId].mal = malAdi;
            data[rowId].malid = malId;

            // SlickGrid'deki satırı güncelle
            grid.updateRow(rowId);
            goToNextCol();

        }
    }

    function goToNextCol() {

        var activeCell = grid.getActiveCell();
        var columns = grid.getColumns();

        var nextCell = null;
        if (activeCell) {
            var sayac = 1;
            while (true) {
                nextCell = {
                    row: activeCell.row,
                    cell: activeCell.cell + sayac
                };
                if (columns[nextCell.cell].editable == false)
                    sayac += 1;
                else
                    break;
            }
        }

        if (nextCell && nextCell.cell < grid.getColumns().length) {
            grid.gotoCell(nextCell.row, nextCell.cell, true);
        }
    }

    function goToPrevColumn(remove) {
        var activeCell = grid.getActiveCell();

        // Eğer aktif bir hücre varsa
        if (activeCell) {
            // Aktif hücrenin sütununu al
            var currentColumn = activeCell.cell;

            // Eğer sütun 0'dan büyükse, bir önceki sütuna git
            if (currentColumn > 0) {
                grid.gotoCell(activeCell.row, currentColumn - 1, true);
                var prevColumnField = grid.getColumns()[currentColumn - 1].field;
                data[activeCell.row][prevColumnField] = '';
                grid.updateRow(activeCell.row);
            }
        }
    }

    function OrtKiloHesapla() {
        var rowId = grid.getActiveCell().row;
        var item = dataView.items[rowId];
        if (parseFloat(item.adet) > 0 && parseFloat(item.kilo) > 0) {
            var val = (parseFloat(item.kilo) / parseFloat(item.adet)).toFixed(2).toString();
            item.ortkilo = FormatDecimalNumber(val);
            grid.updateRow(rowId);
        }
    }
    function TutarHesapla() {
        var rowId = grid.getActiveCell().row;
        var item = dataView.items[rowId];
        if (parseFloat(item.malfiyat) > 0 && item.malfiyat != null && (parseFloat(item.kilo) || parseFloat(item.adet))) {
            if (parseFloat(item.kilo) > 0) {
                item.tutar = parseFloat(item.kilo) * parseFloat(item.malfiyat);
            } else if (parseFloat(item.adet) > 0) {
                item.tutar = parseFloat(item.adet) * parseFloat(item.malfiyat);
            } else {
                item.tutar = "";
            }
            grid.updateRow(rowId);
            DigerHesaplamalar();
        }
    }

    //function GetInputVal(val) {
    //    return parseFloat(parseFloat(val.replace(".", "").replace(",", ".")).toFixed(2));
    //};
    //function SetInputVal(val) {
    //    return val.toString().replace(".", ",");
    //}
    function FormatDecimalNumber(num) {
        num = num?.toString();
        if (num?.includes(".")) {
            var decimalPart = num.split(".")[1];
            decimalPart.length == 1 ? num = num + "0" : null;
            num = num.replace(".", ",");
        } else {
            num = num + ",00";
        }
        if (num?.includes(",")) {
            var decimalPart = num.split(",")[1];
            decimalPart.length == 1 ? num = num + "0" : null;
        } else {
            num = num + ",00";
        }
        return num;
    }
</script>


<button id="malButton" type='button' data-btarget='mal' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' data-bs-toggle='modal' data-bs-target='#modal' data-label='Seç' data-remote-url='@Url.Action("MalAdlar", "Common", new { target = "gridMal",isInput = true ,inputType = "name" })' style='display:none;'><i class='ri-search-line'></i> MAL Formatter Button</button>

