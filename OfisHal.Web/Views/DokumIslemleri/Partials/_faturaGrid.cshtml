@{
    var FaturaModel = (List<VohalStokHareketi>)ViewData["faturaModel"];
}
<script>
    var dataView;
    var grid;
    var data = [];
    var columns = [
        { id: "id", name: "ID", width: 10, field: "id", cssClass: "cell-title", selectable: false, editable: false },
        { id: "stoktipi", name: "Stok Tipi", field: "stoktipi", width: 80, selectable: false, resizable: false },
        { id: "stokkunye", name: "Stok Künye", field: "stokkunye", selectable: false, editable: false, editor: Slick.Editors.Text },
        { id: "malkodu", name: "Mal Kodu", field: "malkodu", editor: Slick.Editors.Text, formatter: malFormatter },
        { id: "maladi", name: "Mal Adı", field: "maladi", editor: Slick.Editors.Text, formatter: malFormatter },
        { id: "kapkodu", name: "Kap Kodu", width: 10, field: "kapkodu", editor: Slick.Editors.Text, formatter: kapFormatter },
        { id: "kapadi", name: "Kap Adı", width: 10, field: "kapadi", editor: Slick.Editors.Text, formatter: kapFormatter },
        { id: "iadeli", name: "İadeli", field: "iadeli", editor: Slick.Editors.Text },
        { id: "kap", name: "Kap", field: "kap", cssClass: "column-sayi", editor: Slick.Editors.Integer },
        { id: "miktar", name: "Miktar", field: "miktar", cssClass: "column-sayi", editor: Slick.Editors.Float },
        { id: "fiyat", name: "Fiyat", field: "fiyat", cssClass: "column-sayi", editor: Slick.Editors.Float },
        { id: "tutar", name: "Tutar", field: "tutar", cssClass: "column-sayi", selectable: false, editable: false, editor: Slick.Editors.Float },
        { id: "satilankap", name: "Satılan Kap", field: "satilankap", cssClass: "column-sayi", editor: Slick.Editors.Integer },
        { id: "satilanmiktar", name: "Satılan Miktar", field: "satilanmiktar", cssClass: "column-sayi", editor: Slick.Editors.Float },
        { id: "aciklama", name: "Açıklama", width: 10, field: "aciklama", editor: Slick.Editors.Text },
    ];

    var options = {
        columnPicker: {
            columnTitle: "Sütunlar",
            hideForceFitButton: false,
            hideSyncResizeButton: false,
            forceFitTitle: "Genişliğe sığdırmaya zorla",
            syncResizeTitle: "Senkron yeniden boyutlandırma",
        },
        editable: true,
        enableAddRow: true,
        enableCellNavigation: true,
        asyncEditorLoading: false,
        rowHeight: 40,
        forceFitColumns: true,
        createFooterRow: true,
        showFooterRow: true,
        footerRowHeight: 28
    };

    function UpdateAllTotals(grid) {
        var columnIdx = grid.getColumns().length;
        while (columnIdx--) {
            UpdateTotal(columnIdx, grid);
        }
    }


    function UpdateTotal(cell, grid) {
        var columnId = grid.getColumns()[cell].id;

        // Sadece istenen sütunlara odaklan
        if (["id", "kap", "miktar", "fiyat", "tutar", "satilankap", "satilanmiktar"].includes(columnId)) {
            var total = 0;
            var i = data.length;
            while (i--) {
                if (columnId == "tutar" || columnId == "fiyat") {
                    total += parseFloat(data[i][columnId]);
                }
                else {
                    total += parseInt(data[i][columnId], 10) || 0;
                }
            }
            var columnElement = grid.getFooterRowColumn(columnId);
            total = isNaN(total) ? 0 : total;
            columnElement.textContent = `${total}`;
        }
        else {
            var columnElement = grid.getFooterRowColumn(columnId);
            columnElement.textContent = "-";
        }
    }

    function toggleFilterRow() {
        grid.setTopPanelVisibility(!grid.getOptions().showTopPanel);
    }

    document.addEventListener("DOMContentLoaded", function () {

        const savedColumnStates = loadColumnSettings();

    @if (FaturaModel.Count == 0)
    {
        @:var d = (data[0] = {});
        @:d["id"] = 1;
        @:d["stokhareketiId"] = "";
        @:d["stoktipi"] = "Kilo";
        @:d["stokkunye"] = "";
        @:d["stokkunyeId"] = "";
        @:d["malId"] = "";
        @:d["malkodu"] = "";
        @:d["maladi"] = "";
        @:d["kapId"] = "";
        @:d["kapkodu"] = "";
        @:d["kapadi"] = "";
        @:d["iadeli"] = "";
        @:d["kap"] = "";
        @:d["miktar"] = "";
        @:d["fiyat"] = "";
        @:d["tutar"] = "";
        @:d["satilankap"] = "";
        @:d["satilanmiktar"] = "";
        @:d["aciklama"] = "";
    }
    else
    {
        for (var i = 0; i < FaturaModel.Count; i++)
        {
            @:var d = (data[@i] = {});
            @:d["id"] = @i+1;
            @:d["stokhareketiId"] = "@Html.Raw(FaturaModel[i].StokHareketiId)";
            @:d["stoktipi"] = "@Html.Raw(FaturaModel[i].StokTipi)" === 1 ? "Kilo" : "Kap";
            @:d["stokkunye"] = "@Html.Raw(FaturaModel[i].StokKunyesi)";
            @:d["stokkunyeId"] = "@Html.Raw(FaturaModel[i].StokKunyeId)";
            @:d["malId"] = @Html.Raw(FaturaModel[i].MalId);
            @:d["malkodu"] = "@Html.Raw(FaturaModel[i].MalKodu)";
            @:d["maladi"] = "@Html.Raw(FaturaModel[i].MalAdi)";
            @:d["kapId"] = "@Html.Raw(FaturaModel[i].KapId)";
            @:d["kapkodu"] = "@Html.Raw(FaturaModel[i].KapKodu)";
            @:d["kapadi"] = "@Html.Raw(FaturaModel[i].KapAdi)";
            @:d["iadeli"] = "@Html.Raw(FaturaModel[i].Iadeli)";
            @:d["kap"] = "@Html.Raw(FaturaModel[i].KapSayisi)";
            @:d["miktar"] = parseFloat('@Html.Raw(FaturaModel[i].Miktar)'.replace(',', '.'));
            @:d["fiyat"] = parseFloat('@Html.Raw(FaturaModel[i].Fiyat)'.replace(',', '.')) || '';
            var tutar = FaturaModel[i].Miktar * FaturaModel[i].Fiyat;
            @:d["tutar"] = parseFloat('@Html.Raw(tutar)'.replace(',', '.')) || '';
            @:d["satilankap"] = "@Html.Raw(FaturaModel[i].SatilanKap)";
            @:d["satilanmiktar"] = parseFloat('@Html.Raw(FaturaModel[i].SatilanMiktar)'.replace(',', '.'));
            @:d["aciklama"] = "@Html.Raw(FaturaModel[i].Aciklama)";
        }
    }
        dataView = new Slick.Data.DataView({ inlineFilters: true });
        grid = new Slick.Grid("#myGrid", dataView, columns, options);
        UpdateAllTotals(grid);
        grid.setSelectionModel(new Slick.RowSelectionModel());

        var columnpicker = new Slick.Controls.ColumnPicker(columns, grid, {
            ...options,
        });

        // Sütun seçim ayarları değiştikçe localStorage'a kaydet
        columnpicker.onColumnsChanged.subscribe(function (e, args) {
            var storedColumns = grid.getColumns();
            saveColumnSettings(storedColumns);
        });
        grid.onColumnsResized.subscribe(function (e, args) {
            var storedColumns = grid.getColumns();
            saveColumnSettings(storedColumns);
        });
        if (savedColumnStates) {
            grid.setColumns(savedColumnStates);
        }
        grid.onContextMenu.subscribe(function (e) {
            e.preventDefault();
            var cell = grid.getCellFromEvent(e);
            const contextMenuElm = document.querySelector('#contextMenu');
            contextMenuElm.dataset.row = cell.row;
            contextMenuElm.style.top = `${e.pageY}px`;
            contextMenuElm.style.left = `${e.pageX}px`;
            contextMenuElm.style.display = 'block';

            document.body.addEventListener('click', () => {
                contextMenuElm.style.display = 'none';
            });
        });

        grid.onCellChange.subscribe(async function (e, args) {

            var rowId = args.row;
            if (args.cell === grid.columnsById["miktar"] ||
                args.cell === grid.columnsById["fiyat"]
            ) {
                data[rowId].miktar = data[rowId].miktar || 0;
                data[rowId].fiyat = data[rowId].fiyat || 0;
                updateRowValues(rowId);
            }
            if (args.cell === grid.columnsById["id"]) {
                if (Number.isInteger(args.item.id)) {
                    dataView.updateItem(args.item.id, args.item);
                } else {
                    // Çevrim yap ve kontrol et.
                    var itemIdAsInteger = parseInt(args.item.id, 10);
                    dataView.updateItem(itemIdAsInteger, args.item);
                }


            }


            UpdateTotal(args.cell, args.grid);
            switch (args.column.field) {
                case "malkodu":
                    var val = await gridGetData("/Common/MalGetir?isInput=True&target=gridMal&codeOrName=true&inputType=code", args.item[args.column.field], "mal");
                    val.result ? updateMalCell(val.data.MalId, val.data.Ad, val.data.Kod) : null;
                    break;
                case "maladi":
                    var val = await gridGetData("/Common/MalGetir?isInput=True&target=gridMal&codeOrName=false&inputType=name", args.item[args.column.field], "mal");
                    val.result ? updateMalCell(val.data.MalId, val.data.Ad, val.data.Kod) : null;
                    break;
                case "kapkodu":
                    var val = await gridGetData("/Common/KapGetir?isInput=True&target=gridKap&codeOrName=true&inputType=code", args.item[args.column.field], "kap");
                    val.result ? updateKapCell(val.data.KapId, val.data.Ad, val.data.Kod) : null;
                    break;
                case "kapadi":
                    var val = await gridGetData("/Common/KapGetir?isInput=True&target=gridKap&codeOrName=false&inputType=name", args.item[args.column.field], "kap");
                    val.result ? updateKapCell(val.data.KapId, val.data.Ad, val.data.Kod) : null;
                    break;
            }
        });
        function gridGetData(reqUrl, val, target) {
            var deger = val.trim();
            return new Promise((resolve, reject) => {
                if (deger.length > 0) {
                    $.ajax({
                        url: reqUrl,
                        type: "GET",
                        data: { content: deger },
                        success: (res) => {
                            switch (res.length) {
                                case 0:
                                    ShowAlert(false, "Kayıt Bulunamadı");
                                    goToPrevColumn(true);
                                    resolve({ result: false, data: null });
                                    break;
                                case 1:
                                    resolve({ result: true, data: res[0] });
                                    break;
                                default:
                                    resolve({ result: false, data: null });
                                    goToPrevColumn(true);
                                    loadModal(res, target);
                                    break;
                            }
                        }
                    });
                }
                else {
                    resolve({ result: false, data: null });
                }
            });
        }
        grid.onKeyDown.subscribe(function (e) {
            var activeCell = grid.getActiveCell();
            if (activeCell != null) {
                var column = grid.getColumns()[activeCell.cell];
                if (column.cssClass == "column-sayi") {
                    //harf girişini engelle
                    if (e.key.length === 1 && e.key.match(/[^0-9]/)) {
                        e.preventDefault();
                    }


                }
            }

            if (e.key === 'F12') {
                var formatterColumns = ["malkodu","maladi", "kapkodu","kapadi"];
                var field = column.field;
                // İlgili buttonun id'sini belirle
                if (formatterColumns.includes(field)) {

                    if (field == "malkodu" || field == "maladi") {
                        field = "mal";
                    }
                    else {
                        field = "kap";
                    }

                    var buttonId = field + "Button";
                    var button = document.getElementById(buttonId);
                    if (button) {
                        button.click();
                    }

                    e.preventDefault();
                }
            }

            if (e.ctrlKey && (e.key === 's' || e.key === 'S')) {
                e.preventDefault();

                DeleteConfirm().then(p => {
                    if (p.isConfirmed) {
                        // DataView'dan satırı kaldır
                        dataView.deleteItem(activeCell.row + 1);

                        // İlgili satırı grid üzerinden kaldır
                        grid.invalidateRow(activeCell.row + 1);
                        grid.render();

                        // Eğer gerekiyorsa, veriyi güncelle
                        dataView.refresh();
                    }
                });
            }

            if (e.ctrlKey && (e.key === 'e' || e.key === 'E')) {
                e.preventDefault();

                onAddNewRow()
            }

            if (e.which === 13) {
                // Şimdi dataView'deki işlemlerinizi gerçekleştirin.
                if (grid.getActiveCell().row === dataView.getLength()) {
                    onAddNewRow();
                }
            }


            // select all rows on ctrl-a
            if (e.which != 65 || !e.ctrlKey) {
                return false;
            }
            var rows = [];
            for (var i = 0; i < dataView.getLength(); i++) {
                rows.push(i);
            }

            grid.setSelectedRows(rows);
            e.preventDefault();
        });

        dataView.onRowCountChanged.subscribe(function (e, args) {
            grid.updateRowCount();
            grid.render();
        });

        dataView.onRowsChanged.subscribe(function (e, args) {
            grid.invalidateRows(args.rows);
            grid.render();
        });

        grid.onClick.subscribe(function (e) {
            var cell = grid.getCellFromEvent(e);
            var clickedColumn = grid.getColumns()[cell.cell];

            // Sütunun id özelliğini kontrol et
            if (clickedColumn.id == "stoktipi") {
                if (!grid.getEditorLock().commitCurrentEdit()) {
                    return;
                }

                var states = { "Kilo": "Kap", "Kap": "Kilo" };
                data[cell.row].stoktipi = states[data[cell.row].stoktipi];
                grid.updateRow(cell.row);
                e.stopPropagation();
            }

            if (cell.row === dataView.getLength() && grid.getCellFromEvent(e).cell === 0) {
                onAddNewRow();
            }
        });

        grid.onAddNewRow.subscribe(function (e, args) {

            var newDataRow = {
                id: dataView.getLength() + 1, // Yeni bir numara oluştur
                stokhareketiId:"",
                stoktipi: "Kilo",
                stokkunye: "",
                stokkunyeId: "",
                malId: "",
                malkodu: "",
                maladi: "",
                kapId: "",
                kapkodu: "",
                kapadi: "",
                iadeli: "",
                kap: "",
                miktar: "",
                fiyat: "",
                tutar: "",
                satilankap: "",
                satilanmiktar: "",
                aciklama: "",
            };
            if (!isLastRowEmpty()) {
                Slick.Utils.extend(newDataRow, args.item);
                dataView.addItem(newDataRow);
                dataView.refresh();
            }
        });



        function onAddNewRow() {

            var newDataRow = {
                id: dataView.getLength() + 1, // Yeni bir numara oluştur
                stokhareketiId: "",
                stoktipi: "Kilo",
                stokkunye: "",
                stokkunyeId: "",
                 malId: "",
                 malkodu: "",
                 maladi: "",
                 kapId: "",
                 kapkodu: "",
                 kapadi: "",
                 iadeli: "",
                 kap: "",
                 miktar: "",
                 fiyat: "",
                 tutar: "",
                 satilankap: "",
                 satilanmiktar: "",
                 aciklama: "",
            };
            if (!isLastRowEmpty()) {
                dataView.addItem(newDataRow);
                dataView.refresh();
            }
        }
        function isLastRowEmpty() {
            var lastRow = data[data.length - 1];
            return !lastRow.maladi.trim();
        }


        var dataArray = data;

        dataView.beginUpdate();
        dataView.setItems(dataArray);
        dataView.endUpdate();

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);
        //Set last row's Kod field selected and editable on page load
        grid.gotoCell(dataView.getLength() - 1, 2, true);
    });

    // MAL
    function malFormatter(row, cell, value, columnDef, dataContext) {
        return "<div><button type='button' data-btarget='mal' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' data-bs-toggle='modal' data-bs-target='#modal' data-label='Seç' data-remote-url='@Url.Action("MalKodlar", "Common", new { target = "gridMal",isInput = true ,inputType = "name" })'' ><i class='ri-search-line'></i></button>" + value + "</div>";
        // return "<div><button type='button' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' onclick='loadAllMallar(" + row + ")'><i class=' ri-search-line '></i></button>" + value + "</div>";
    }


    // Kap
    function kapFormatter(row, cell, value, columnDef, dataContext) {
        return "<div><button type='button' data-btarget='kap' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' data-bs-toggle='modal' data-bs-target='#modal' data-label='Seç' data-remote-url='@Url.Action("KapKodlar", "Common",new { target = "gridKap", isInput = true, inputType = "name" })'><i class='ri-search-line'></i></button>" + value + "</div>";
        // return "<div><button type='button' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' onclick='loadKap(" + row + ")'><i class=' ri-search-line '></i></button>" + value + "</div>";
    }

    document.querySelector("#contextMenu").addEventListener('click', (e) => {
        if (e.target.nodeName.toLowerCase() !== "li") {
            return;
        }
        if (!grid.getEditorLock().commitCurrentEdit()) {
            return;
        }
        const row = e.target.parentNode.dataset.row;
        data[row].stoktipi = e.target.getAttribute('data');
        grid.updateRow(row);
    });


    function updateRowValues(rowId) {

        data[rowId].miktar = data[rowId].miktar || 0;
        data[rowId].fiyat = data[rowId].fiyat || 0;
        if (!isNaN(data[rowId].miktar) && !isNaN(data[rowId].fiyat)) {
            data[rowId].tutar = (parseFloat(data[rowId].miktar) * parseFloat(data[rowId].fiyat)).toFixed(2);

            // Grid'i güncelle
            grid.updateRow(rowId);

        }
    }

    // localStorage üzerinde sütun seçim ayarlarını kaydet
    function saveColumnSettings(columnStates) {
        var columnsToSave = columnStates.map(column => {
            var formattedColumn = {
                ...column,
                formatter: column.formatter ? column.formatter.toString() : null
            };

            //// Eğer editor bir fonksiyon ise, onu ad olarak kaydet
            //if (typeof column.editor === 'function') {
            //    formattedColumn.editor = 'function';
            //} else if (typeof column.editor === 'object') {
            //    // Eğer editor bir nesne ise, tüm özelliklerini kaydet
            //    formattedColumn.editor = { ...column.editor };
            //} else {
            //    formattedColumn.editor = null;
            //}

            if (column.editor != undefined && column.editor != null) {
                formattedColumn.editor = column.editor.name;
            }

            return formattedColumn;
        });

        localStorage.setItem('columnSettingsStok', JSON.stringify(columnsToSave));
    }

    // localStorage'dan sütun seçim ayarlarını al
    function loadColumnSettings() {
        const savedColumnStates = localStorage.getItem('columnSettingsStok');
        if (savedColumnStates) {
            const columns = JSON.parse(savedColumnStates);
            return columns.map(column => {
                var restoredColumn = {
                    ...column,
                    formatter: column.formatter ? new Function('return ' + column.formatter)() : null
                };

                //// Eğer editor 'function' olarak kaydedilmişse, geri yüklenirken bir fonksiyon olarak atandı
                //if (column.editor === 'function') {
                //    restoredColumn.editor = Slick.Editors.Text;
                //} else {
                //    restoredColumn.editor = null;
                //}

                if (column.editor === "TextEditor") {
                    restoredColumn.editor = Slick.Editors.Text;
                }
                else if (column.editor === "IntegerEditor") {
                    restoredColumn.editor = Slick.Editors.Integer;
                }
                else if (column.editor === "_FloatEditor") {
                    restoredColumn.editor = Slick.Editors.Float;
                }
                else {
                    restoredColumn.editor = null;
                }

                return restoredColumn;
            });
        }
        return null;
    }

    function postGridElements(isNew,kesildimi,kunye) {
        var gridData = grid.getData();
        grid.getEditController().commitCurrentEdit();
        grid.resetActiveCell();
        var requestDataList = [];

        for (var i = 0; i < gridData.items.length; i++) {
            var rowData = gridData.items[i];
            if (parseInt(rowData.malId) !== 0 && rowData.malId !== "" && rowData.malId !== null) {

                var requestData = {
                    StokHareketiId: parseInt(rowData.stokhareketiId),
                    SatirNo: rowData.id - 1,
                    StokTipi: rowData.stoktipi === "Kilo" ? 1 : 0,
                    MalId: parseInt(rowData.malId),
                    KapId: parseFloat(rowData.kapId),
                    KapSayisi: parseFloat(rowData.kap),
                    Miktar: parseFloat(rowData.miktar),
                    Fiyat: parseFloat(rowData.fiyat),
                    SatilanMiktar: parseFloat(rowData.satilanmiktar),
                    SatilanKap: parseFloat(rowData.satilankap),
                    StokKunyeId: parseFloat(rowData.stokkunyeId)
                };

                for (const key in requestData) {
                    if (requestData.hasOwnProperty(key) && typeof requestData[key] === 'number' && isNaN(requestData[key])) {
                        requestData[key] = 0;
                    }
                }

                requestDataList.push(requestData);
            }
        }

        var requestPostData = JSON.stringify(requestDataList);

        $.ajax({
            url: '/DokumIslemleri/CreateFaturaSatir',
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            data: requestPostData,
            success: function (responsedata) {

                if (responsedata.success) {
                    faturaSave(isNew, kesildimi, kunye);
                }
                else {
                    ShowAlert(false, "Hata Oluştu " + responsedata.message);
                }
            },
            error: function (error) {
                ShowAlert(false, "Hata Oluştu - Satırları kontrol edin" + error);
                //console.error('Hata oluştu:', error);
            }
        });
    }
    function faturaSave(isNew, kesildimi, kunye) {
        // Form verilerini serialize ediyoruz
        var formData = $("#faturaForm").serialize();

        $.ajax({
            type: "POST",
            url: "/DokumIslemleri/SaveFatura",
            data: formData,
            success: function (response) {
                //ShowAlert(true, "Fatura Kaydedildi");
                if (isNew) {
                    //onclick="window.location.href='/TohalFaturas/Index?yeni=True'"
                    window.location.href = '/DokumIslemleri/Stok?yeni=True';
                }
                else {
                    if (kesildimi) {
                        var faturaElementi = document.getElementById('faturakes');
                        faturaElementi.click();
                    }
                    if (kunye) {
                        kunyeAl()
                    }
                    else {
                        if (window.location.href.includes("?yeni=True")) {
                            window.location = window.location.href.split("?")[0] + "?faturaId=" + response.faturaId;
                        }
                        else {
                            location.reload();
                        }
                    }
                }
            },
            error: function (error) {
                ShowAlert(false, "Fatura Hata " + error);
                //console.error(error);
            }
        });
    }

    function kunyeAl() {
        $.ajax({
            type: "GET",
            url: "/DokumIslemleri/StokKunyeAL",
            data: { belgeNo: '@Model.FaturaNo', faturaId: '@Model.MakbuzId' },
            success: function (response) {
                if (response.success) {
                    for (var i = 0; i < response.message.length; i++) {
                        var currentRow = response.message[i];
                        var rowIndex = i + 1;

                        if (currentRow.Mesaj !== null && currentRow.Mesaj !== undefined && currentRow.Mesaj !== "") {
                            ErrorAlert(rowIndex + ". satir - kod: " + currentRow.HataKodu + " - mesaj: " + currentRow.Mesaj);

                        } else {
                            SuccessAlert(rowIndex + ". satir - mesaj: 'İşlem başarılı'");
                        }
                    }
                    if (window.location.href.includes("?yeni=True")) {
                        window.location = window.location.href.split("?")[0] + "?faturaId=" + response.faturaId;
                    }
                    else {
                        location.reload();
                    }
                }
            },
            error: function (error) {
                ShowAlert(false, "Künye Hata " + error.message);
            }
        });
    }



</script>
<!--Mal-->
<script>

    function updateMalCell(malId, malAdi, malKodu) {
        if (malId != null && malId != "" && malAdi != null && malAdi != "") {
            // Tıklanan satırın indisini al
            var rowId = grid.getActiveCell().row;

            // SlickGrid'deki veriyi güncelle
            data[rowId].maladi = malAdi;
            data[rowId].malId = malId;
            data[rowId].malkodu = malKodu;

            // SlickGrid'deki satırı güncelle
            grid.updateRow(rowId);
         
        }
    }



    function updateKapCell(kapId, kapAdi, kapKodu) {
        if (kapId != null && kapId != "" && kapAdi != null && kapAdi != "") {
            // Tıklanan satırın indisini al
            var rowId = grid.getActiveCell().row;

            // SlickGrid'deki veriyi güncelle
            data[rowId].kapadi = kapAdi;
            data[rowId].kapId = kapId;
            data[rowId].kapkodu = kapKodu;

            // SlickGrid'deki satırı güncelle
            grid.updateRow(rowId);
        }
    }



    function goToNextCol() {

        var activeCell = grid.getActiveCell();
        var column = grid.getColumns()[activeCell.cell];

        var nextCell = null;
        if (activeCell) {
            nextCell = {
                row: activeCell.row,
                cell: activeCell.cell + 1
            };
        }

        if (nextCell && nextCell.cell < grid.getColumns().length) {
            grid.gotoCell(nextCell.row, nextCell.cell, true);
        }
    }

    function goToPrevColumn(remove) {
        var activeCell = grid.getActiveCell();

        // Eğer aktif bir hücre varsa
        if (activeCell) {
            // Aktif hücrenin sütununu al
            var currentColumn = activeCell.cell;

            // Eğer sütun 0'dan büyükse, bir önceki sütuna git
            if (currentColumn > 0) {
                grid.gotoCell(activeCell.row, currentColumn - 1, true);
                var prevColumnField = grid.getColumns()[currentColumn - 1].field;
                data[activeCell.row][prevColumnField] = '';
                grid.updateRow(activeCell.row);
            }
        }
    }
</script>


<button id="malButton" type='button' data-btarget='mal' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' data-bs-toggle='modal' data-bs-target='#modal' data-label='Seç' data-remote-url='@Url.Action("MalKodlar", "Common", new { target = "gridMal",isInput = true ,inputType = "name" })' style='display:none;'><i class='ri-search-line'></i> MAL Formatter Button</button>


<button id="kapButton" type='button' data-btarget='kap' class='btn btn-xs btn-outline-primary btn-icon waves-effect waves-light' data-bs-toggle='modal' data-bs-target='#modal' data-label='Seç' data-remote-url='@Url.Action("KapKodlar", "Common",new { target = "gridKap", isInput = true, inputType = "name" })' style='display:none;'><i class='ri-search-line'></i> KAP Formatter Button</button>
